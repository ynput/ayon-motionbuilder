{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"MotionBuilder Addon","text":"<p>This adds integration to Autodesk MotionBuilder. MotionBuilder is a 3D character animation software which users can do virtual cinematography, motion capture and traditional keyframe animation.</p>"},{"location":"index.html#settings","title":"Settings","text":"<p>Path to Motion Builder executable must be set in the Ayon Setting in <code>Applications</code> addon (<code>ayon+settings://applications/applications/motionbuilder</code>) and added in <code>Anatomy</code>.<code>Attributes</code> for particular project to be visible in the Launcher.</p>"},{"location":"index.html#implemented-workflows","title":"Implemented workflows","text":"<p>Currently supports importing model/rig/animation/camera, exporting animation and saving/opening/publishing workfiles in MotionBuilder integration.</p>"},{"location":"index.html#how-to-start","title":"How to start","text":"<p>There is a <code>create_package.py</code> python file which contains logic how to create the addon from AYON codebase. Just run the code. ```shell python ./create_package.py</p>"},{"location":"license.html","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy][name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"autoapi/summary.html","title":"Summary","text":"<ul> <li>client<ul> <li>ayon_motionbuilder<ul> <li>addon</li> <li>api<ul> <li>lib</li> <li>menu</li> <li>pipeline</li> <li>plugin</li> </ul> </li> <li>hooks<ul> <li>injected_python</li> <li>startup_script</li> </ul> </li> <li>plugins<ul> <li>create<ul> <li>create_animation</li> <li>create_workfile</li> </ul> </li> <li>load<ul> <li>load_pointcache</li> </ul> </li> <li>publish<ul> <li>collect_current_file</li> <li>collect_workfile</li> <li>extract_animation</li> <li>increment_workfile_version</li> <li>validate_scene_saved</li> </ul> </li> </ul> </li> <li>startup<ul> <li>startup</li> </ul> </li> <li>version</li> </ul> </li> </ul> </li> <li>server<ul> <li>settings</li> </ul> </li> </ul>"},{"location":"autoapi/client/ayon_motionbuilder/index.html","title":"ayon_motionbuilder","text":""},{"location":"autoapi/client/ayon_motionbuilder/addon.html","title":"addon","text":""},{"location":"autoapi/client/ayon_motionbuilder/version.html","title":"version","text":"<p>Package declaring AYON addon 'motionbuilder' version.</p>"},{"location":"autoapi/client/ayon_motionbuilder/api/index.html","title":"api","text":"<p>Public API for Motion Builder</p>"},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html","title":"lib","text":""},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html#client.ayon_motionbuilder.api.lib.get_node_by_name","title":"<code>get_node_by_name(node_name)</code>","text":"<p>Get instance node/container node by name</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>node name</p> required Source code in <code>client/ayon_motionbuilder/api/lib.py</code> <pre><code>def get_node_by_name(node_name: str):\n    \"\"\"Get instance node/container node by name\n\n    Args:\n        node_name (str): node name\n    \"\"\"\n    matching_sets = [s for s in FBSystem().Scene.Sets\n                        if s.Name == node_name]\n    node = next(iter(matching_sets), None)\n    return node\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html#client.ayon_motionbuilder.api.lib.get_selected_hierarchies","title":"<code>get_selected_hierarchies(node, selection_data)</code>","text":"<p>Get the hierarchies/children from the top group</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>FBObject</code> <p>FBSystem().Scene.RootModel.Children</p> required <code>selection_data</code> <code>dict</code> <p>data which stores the node selection</p> required Source code in <code>client/ayon_motionbuilder/api/lib.py</code> <pre><code>def get_selected_hierarchies(node, selection_data):\n    \"\"\"Get the hierarchies/children from the top group\n\n    Args:\n        node (FBObject): FBSystem().Scene.RootModel.Children\n        selection_data (dict): data which stores the node selection\n    \"\"\"\n    selected = True\n    if node.ClassName() in {\n        \"FBModel\", \"FBModelSkeleton\", \"FBModelMarker\",\n        \"FBCamera\", \"FBModelNull\"}:\n            if selection_data:\n                for name in selection_data.keys():\n                    if node.Name == name:\n                        selected = selection_data[name]\n            node.Selected = selected\n    for child in node.Children:\n        get_selected_hierarchies(child, selection_data)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html#client.ayon_motionbuilder.api.lib.load_data_from_parameter","title":"<code>load_data_from_parameter(target_param)</code>","text":"<p>Load the ayon data from parameter</p> <p>Parameters:</p> Name Type Description Default <code>target_param</code> <code>FBListPropertyObject</code> <p>parameter to store ayon data</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>ayon-related data</p> Source code in <code>client/ayon_motionbuilder/api/lib.py</code> <pre><code>def load_data_from_parameter(target_param):\n    \"\"\"Load the ayon data from parameter\n\n    Args:\n        target_param (FBListPropertyObject): parameter to store ayon data\n\n    Returns:\n        dict: ayon-related data\n    \"\"\"\n    data = target_param.Data\n    data = json.loads(data[len(JSON_PREFIX):])\n    return data\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html#client.ayon_motionbuilder.api.lib.lsattr","title":"<code>lsattr(attr, value=None, root=None)</code>","text":"<p>List nodes having attribute with specified value.</p> <p>Parameters:</p> Name Type Description Default <code>attr</code> <code>str</code> <p>Attribute name to match.</p> required <code>value</code> <code>(str, Optional)</code> <p>Value to match, of omitted, all nodes with specified attribute are returned no matter of value.</p> <code>None</code> <code>root</code> <code>(str, Optional)</code> <p>Root node name. If omitted, scene root is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>list of nodes.</p> Source code in <code>client/ayon_motionbuilder/api/lib.py</code> <pre><code>def lsattr(\n        attr: str,\n        value: Union[str, None] = None,\n        root: Union[str, None] = None) -&gt; list:\n    \"\"\"List nodes having attribute with specified value.\n\n    Args:\n        attr (str): Attribute name to match.\n        value (str, Optional): Value to match, of omitted, all nodes\n            with specified attribute are returned no matter of value.\n        root (str, Optional): Root node name. If omitted, scene root is used.\n\n    Returns:\n        list of nodes.\n    \"\"\"\n    nodes = []\n    for obj_sets in FBSystem().Scene.Sets:\n        instances_param = obj_sets.PropertyList.Find(\"instances\")\n        if not instances_param:\n            continue\n        parsed_data = load_data_from_parameter(instances_param)\n        if value and parsed_data.get(attr) == value:\n            nodes.append(obj_sets)\n        elif parsed_data.get(attr):\n            nodes.append(obj_sets)\n    return nodes\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html#client.ayon_motionbuilder.api.lib.maintain_selection","title":"<code>maintain_selection(selected_nodes)</code>","text":"<p>Maintain selection during context</p> <p>Parameters:</p> Name Type Description Default <code>selected_nodes</code> <code>FBObject</code> <p>selected nodes</p> required Source code in <code>client/ayon_motionbuilder/api/lib.py</code> <pre><code>@contextlib.contextmanager\ndef maintain_selection(selected_nodes):\n    \"\"\"Maintain selection during context\n\n    Args:\n        selected_nodes (FBObject): selected nodes\n    \"\"\"\n    origin_selection = []\n    for node in selected_nodes:\n        origin_selection.append((node, node.Selected))\n        node.Selected = True\n\n    try:\n        yield\n\n    finally:\n        for item in origin_selection:\n            node, selection = item\n            node.Selected = selection\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html#client.ayon_motionbuilder.api.lib.parsed_selected_hierarchies","title":"<code>parsed_selected_hierarchies(node)</code>","text":"<p>Parse the data to find the selected hierarchies Args:     node (FBObject): FBSystem().Scene.RootModel.Children</p> Source code in <code>client/ayon_motionbuilder/api/lib.py</code> <pre><code>def parsed_selected_hierarchies(node):\n    \"\"\"Parse the data to find the selected hierarchies\n    Args:\n        node (FBObject): FBSystem().Scene.RootModel.Children\n    \"\"\"\n    selection_data = {}\n    if node.ClassName() in {\n        \"FBModel\", \"FBModelSkeleton\", \"FBModelMarker\",\n        \"FBCamera\", \"FBModelNull\"}:\n            selection_data[node.Name] = node.Selected\n    for child in node.Children:\n        parsed_selected_hierarchies(child)\n    return selection_data\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html#client.ayon_motionbuilder.api.lib.unique_namespace","title":"<code>unique_namespace(namespace, format='%02d', prefix='', suffix='')</code>","text":"<p>Return unique namespace</p> <p>Parameters:</p> Name Type Description Default <code>namespace</code> <code>str</code> <p>Name of namespace to consider</p> required <code>format</code> <code>str</code> <p>Formatting of the given iteration number</p> <code>'%02d'</code> <code>suffix</code> <code>str</code> <p>Only consider namespaces with this suffix.</p> <code>''</code> <code>con_suffix</code> <p>max only, for finding the name of the master container</p> required <p>unique_namespace(\"bar\")</p>"},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html#client.ayon_motionbuilder.api.lib.unique_namespace--bar01","title":"bar01","text":"<p>unique_namespace(\":hello\")</p>"},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html#client.ayon_motionbuilder.api.lib.unique_namespace--hello01","title":":hello01","text":"<p>unique_namespace(\"bar:\", suffix=\"_NS\")</p>"},{"location":"autoapi/client/ayon_motionbuilder/api/lib.html#client.ayon_motionbuilder.api.lib.unique_namespace--bar01_ns","title":"bar01_NS:","text":"Source code in <code>client/ayon_motionbuilder/api/lib.py</code> <pre><code>def unique_namespace(namespace, format=\"%02d\",\n                     prefix=\"\", suffix=\"\"):\n    \"\"\"Return unique namespace\n\n    Arguments:\n        namespace (str): Name of namespace to consider\n        format (str, optional): Formatting of the given iteration number\n        suffix (str, optional): Only consider namespaces with this suffix.\n        con_suffix: max only, for finding the name of the master container\n\n    &gt;&gt;&gt; unique_namespace(\"bar\")\n    # bar01\n    &gt;&gt;&gt; unique_namespace(\":hello\")\n    # :hello01\n    &gt;&gt;&gt; unique_namespace(\"bar:\", suffix=\"_NS\")\n    # bar01_NS:\n\n    \"\"\"\n\n    def current_namespace():\n        current = namespace\n        # When inside a namespace Max adds no trailing :\n        if not current.endswith(\":\"):\n            current += \":\"\n        return current\n\n    # Always check against the absolute namespace root\n    # There's no clash with :x if we're defining namespace :a:x\n    ROOT = \":\" if namespace.startswith(\":\") else current_namespace()\n\n    # Strip trailing `:` tokens since we might want to add a suffix\n    start = \":\" if namespace.startswith(\":\") else \"\"\n    end = \":\" if namespace.endswith(\":\") else \"\"\n    namespace = namespace.strip(\":\")\n    if \":\" in namespace:\n        # Split off any nesting that we don't uniqify anyway.\n        parents, namespace = namespace.rsplit(\":\", 1)\n        start += parents + \":\"\n        ROOT += start\n\n    iteration = 1\n    increment_version = True\n    while increment_version:\n        nr_namespace = namespace + format % iteration\n        unique = prefix + nr_namespace + suffix\n        cl = FBComponentList()\n        FBFindObjectsByName((f\"{unique}:*\"), cl, True, True)\n        if not cl:\n            name_space = start + unique + end\n            increment_version = False\n            return name_space\n        else:\n            increment_version = True\n        iteration += 1\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/menu.html","title":"menu","text":"<p>Motion Builder menu definition of AYON.</p>"},{"location":"autoapi/client/ayon_motionbuilder/api/menu.html#client.ayon_motionbuilder.api.menu.AYONMenu","title":"<code>AYONMenu</code>","text":"<p>               Bases: <code>object</code></p> <p>Object representing AYON menu.</p> Source code in <code>client/ayon_motionbuilder/api/menu.py</code> <pre><code>class AYONMenu(object):\n    \"\"\"Object representing AYON menu.\n\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.main_widget = self.get_main_widget()\n        self.menu = None\n\n        timer = QtCore.QTimer()\n        # set number of event loops to wait.\n        timer.setInterval(1)\n        timer.timeout.connect(self._on_timer)\n        timer.start()\n\n        self._timer = timer\n        self._counter = 0\n\n    def _on_timer(self):\n        if self._counter &lt; 1:\n            self._counter += 1\n            return\n\n        self._counter = 0\n        self._timer.stop()\n        self._build_ayon_menu()\n\n    @staticmethod\n    def get_main_widget():\n        \"\"\"Get motion builder main window.\"\"\"\n        top_widgets = QtWidgets.QApplication.topLevelWidgets()\n        for widget in top_widgets:\n            if widget.inherits(\"QMainWindow\"):\n                return widget\n        raise RuntimeError('Cannot find motion builder main window.')\n\n    def get_main_menubar(self) -&gt; QtWidgets.QMenuBar:\n        \"\"\"Get main Menubar by motion builder main window.\"\"\"\n        return list(self.main_widget.findChildren(QtWidgets.QMenuBar))[0]\n\n    def _get_or_create_ayon_menu(\n            self, name: str = \"&amp;AYON\",\n            before: str = \"&amp;Help\") -&gt; QtWidgets.QAction:\n        \"\"\"Create AYON menu.\n\n        Args:\n            name (str, Optional): AYON menu name.\n            before (str, Optional): Name of the motion builder main menu\n                item to add AYON menu before.\n\n        Returns:\n            QtWidgets.QAction: AYON menu action.\n\n        \"\"\"\n        if self.menu is not None:\n            return self.menu\n\n        menu_bar = self.get_main_menubar()\n        menu_items = menu_bar.findChildren(\n            QtWidgets.QMenu, options=QtCore.Qt.FindDirectChildrenOnly)\n        help_action = None\n        for item in menu_items:\n            if name in item.title():\n                # we already have AYON menu\n                return item\n\n            if before in item.title():\n                help_action = item.menuAction()\n        tab_menu_label = os.environ.get(\"AYON_MENU_LABEL\") or \"AYON\"\n        op_menu = QtWidgets.QMenu(\"&amp;{}\".format(tab_menu_label))\n        menu_bar.insertMenu(help_action, op_menu)\n\n        self.menu = op_menu\n        return op_menu\n\n    def _build_ayon_menu(self) -&gt; QtWidgets.QAction:\n        \"\"\"Build items in AYON menu.\"\"\"\n        ayon_menu = self._get_or_create_ayon_menu()\n        load_action = QtWidgets.QAction(\"Load...\", ayon_menu)\n        load_action.triggered.connect(self.load_callback)\n        ayon_menu.addAction(load_action)\n\n        publish_action = QtWidgets.QAction(\"Publish...\", ayon_menu)\n        publish_action.triggered.connect(self.publish_callback)\n        ayon_menu.addAction(publish_action)\n\n        manage_action = QtWidgets.QAction(\"Manage...\", ayon_menu)\n        manage_action.triggered.connect(self.manage_callback)\n        ayon_menu.addAction(manage_action)\n\n        library_action = QtWidgets.QAction(\"Library...\", ayon_menu)\n        library_action.triggered.connect(self.library_callback)\n        ayon_menu.addAction(library_action)\n\n        ayon_menu.addSeparator()\n        ayon_menu = self._get_or_create_ayon_menu()\n        workfiles_action = QtWidgets.QAction(\"Work Files...\", ayon_menu)\n        workfiles_action.triggered.connect(self.workfiles_callback)\n        ayon_menu.addAction(workfiles_action)\n\n    def load_callback(self):\n        \"\"\"Callback to show Loader tool.\"\"\"\n        host_tools.show_loader(parent=self.main_widget)\n\n    def publish_callback(self):\n        \"\"\"Callback to show Publisher tool.\"\"\"\n        host_tools.show_publisher(parent=self.main_widget)\n\n    def manage_callback(self):\n        \"\"\"Callback to show Scene Manager/Inventory tool.\"\"\"\n        host_tools.show_scene_inventory(parent=self.main_widget)\n\n    def library_callback(self):\n        \"\"\"Callback to show Library Loader tool.\"\"\"\n        host_tools.show_library_loader(parent=self.main_widget)\n\n    def workfiles_callback(self):\n        \"\"\"Callback to show Workfiles tool.\"\"\"\n        host_tools.show_workfiles(parent=self.main_widget)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/menu.html#client.ayon_motionbuilder.api.menu.AYONMenu.get_main_menubar","title":"<code>get_main_menubar()</code>","text":"<p>Get main Menubar by motion builder main window.</p> Source code in <code>client/ayon_motionbuilder/api/menu.py</code> <pre><code>def get_main_menubar(self) -&gt; QtWidgets.QMenuBar:\n    \"\"\"Get main Menubar by motion builder main window.\"\"\"\n    return list(self.main_widget.findChildren(QtWidgets.QMenuBar))[0]\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/menu.html#client.ayon_motionbuilder.api.menu.AYONMenu.get_main_widget","title":"<code>get_main_widget()</code>  <code>staticmethod</code>","text":"<p>Get motion builder main window.</p> Source code in <code>client/ayon_motionbuilder/api/menu.py</code> <pre><code>@staticmethod\ndef get_main_widget():\n    \"\"\"Get motion builder main window.\"\"\"\n    top_widgets = QtWidgets.QApplication.topLevelWidgets()\n    for widget in top_widgets:\n        if widget.inherits(\"QMainWindow\"):\n            return widget\n    raise RuntimeError('Cannot find motion builder main window.')\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/menu.html#client.ayon_motionbuilder.api.menu.AYONMenu.library_callback","title":"<code>library_callback()</code>","text":"<p>Callback to show Library Loader tool.</p> Source code in <code>client/ayon_motionbuilder/api/menu.py</code> <pre><code>def library_callback(self):\n    \"\"\"Callback to show Library Loader tool.\"\"\"\n    host_tools.show_library_loader(parent=self.main_widget)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/menu.html#client.ayon_motionbuilder.api.menu.AYONMenu.load_callback","title":"<code>load_callback()</code>","text":"<p>Callback to show Loader tool.</p> Source code in <code>client/ayon_motionbuilder/api/menu.py</code> <pre><code>def load_callback(self):\n    \"\"\"Callback to show Loader tool.\"\"\"\n    host_tools.show_loader(parent=self.main_widget)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/menu.html#client.ayon_motionbuilder.api.menu.AYONMenu.manage_callback","title":"<code>manage_callback()</code>","text":"<p>Callback to show Scene Manager/Inventory tool.</p> Source code in <code>client/ayon_motionbuilder/api/menu.py</code> <pre><code>def manage_callback(self):\n    \"\"\"Callback to show Scene Manager/Inventory tool.\"\"\"\n    host_tools.show_scene_inventory(parent=self.main_widget)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/menu.html#client.ayon_motionbuilder.api.menu.AYONMenu.publish_callback","title":"<code>publish_callback()</code>","text":"<p>Callback to show Publisher tool.</p> Source code in <code>client/ayon_motionbuilder/api/menu.py</code> <pre><code>def publish_callback(self):\n    \"\"\"Callback to show Publisher tool.\"\"\"\n    host_tools.show_publisher(parent=self.main_widget)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/menu.html#client.ayon_motionbuilder.api.menu.AYONMenu.workfiles_callback","title":"<code>workfiles_callback()</code>","text":"<p>Callback to show Workfiles tool.</p> Source code in <code>client/ayon_motionbuilder/api/menu.py</code> <pre><code>def workfiles_callback(self):\n    \"\"\"Callback to show Workfiles tool.\"\"\"\n    host_tools.show_workfiles(parent=self.main_widget)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/pipeline.html","title":"pipeline","text":"<p>Pipeline tools for AYON motionbuilder integration.</p>"},{"location":"autoapi/client/ayon_motionbuilder/api/pipeline.html#client.ayon_motionbuilder.api.pipeline.ls","title":"<code>ls()</code>","text":"<p>Get all AYON containers.</p> Source code in <code>client/ayon_motionbuilder/api/pipeline.py</code> <pre><code>def ls():\n    \"\"\"Get all AYON containers.\"\"\"\n    containers = []\n    for obj_sets in FBSystem().Scene.Sets:\n        for prop in obj_sets.PropertyList:\n            if prop.GetName() == \"containers\":\n                    containers.append(obj_sets)\n\n    for container in sorted(containers, key=attrgetter(\"Name\")):\n        yield parse_container(container)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/pipeline.html#client.ayon_motionbuilder.api.pipeline.parse_container","title":"<code>parse_container(container)</code>","text":"<p>Return the container node's full container data.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>str</code> <p>A container node name.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>The container schema data for this container node.</p> Source code in <code>client/ayon_motionbuilder/api/pipeline.py</code> <pre><code>def parse_container(container):\n    \"\"\"Return the container node's full container data.\n\n    Args:\n        container (str): A container node name.\n\n    Returns:\n        dict: The container schema data for this container node.\n\n    \"\"\"\n    data = lib.read(container)\n\n    # Backwards compatibility pre-schemas for containers\n    data[\"schema\"] = data.get(\"schema\", \"openpype:container-3.0\")\n\n    # Append transient data\n    data[\"objectName\"] = container.Name\n    return data\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/plugin.html","title":"plugin","text":"<p>Motion Builder specific AYON/Pyblish plugin definitions.</p>"},{"location":"autoapi/client/ayon_motionbuilder/api/plugin.html#client.ayon_motionbuilder.api.plugin.MotionBuilderCreator","title":"<code>MotionBuilderCreator</code>","text":"<p>               Bases: <code>Creator</code>, <code>MotionBuilderCreatorBase</code></p> Source code in <code>client/ayon_motionbuilder/api/plugin.py</code> <pre><code>class MotionBuilderCreator(Creator, MotionBuilderCreatorBase):\n\n    def create(self, product_name, instance_data, pre_create_data):\n        creator_attributes = instance_data.setdefault(\n            \"creator_attributes\", {})\n        for key in [\n            \"EmbedMedia\",\n            \"SaveSelectedModelsOnly\",\n            \"KeepTransformHierarchy\",\n        ]:\n            if key in pre_create_data:\n                creator_attributes[key] = pre_create_data[key]\n        instance_node = self.create_node(product_name)\n        instance_data[\"instance_node\"] = instance_node\n        # TODO: supports to select models to be published\n        if pre_create_data.get(\"SaveSelectedModelsOnly\"):\n            instance_data[\"selected_nodes\"] = [\n                sel.Name for sel in get_selection()\n            ]\n            node = get_node_by_name(instance_node)\n            if node:\n                for sel in get_selection():\n                    node.ConnectSrc(sel)\n\n        instance = CreatedInstance(\n            self.product_type,\n            product_name,\n            instance_data,\n            self\n        )\n        self._add_instance_to_context(instance)\n        instances_imprint(instance_node, instance.data_to_store())\n        return instance\n\n    def collect_instances(self):\n        self.cache_instance_data(self.collection_shared_data)\n        cached_instances = (\n            self.collection_shared_data[\"mbuilder_cached_instances\"]\n        )\n        for instance in cached_instances.get(self.identifier, []):\n            created_instance = CreatedInstance.from_existing(\n                read(get_node_by_name(instance)), self\n            )\n            self._add_instance_to_context(created_instance)\n\n    def update_instances(self, update_list):\n        for created_inst, changes in update_list:\n            instance_node = created_inst.get(\"instance_node\")\n            new_values = {\n                key: changes[key].new_value\n                for key in changes.changed_keys\n            }\n            product_name = new_values.get(\"productName\", \"\")\n            if product_name and instance_node != product_name:\n                new_product_name = new_values[\"productName\"]\n                node = get_node_by_name(instance_node)\n                instance_node = new_product_name\n                created_inst[\"instance_node\"] = instance_node\n                node.Name = instance_node\n\n            instances_imprint(\n                instance_node,\n                created_inst.data_to_store()\n            )\n\n    def remove_instances(self, instances):\n        \"\"\"Remove specified instance from the scene.\n\n        This is only removing `id` parameter so instance is no longer\n        instance, because it might contain valuable data for artist.\n\n        \"\"\"\n        for instance in instances:\n            instance_node = get_node_by_name(\n                instance.data.get(\"instance_node\")\n            )\n            if instance_node:\n               instance_node.FBDelete()\n            self._remove_instance_from_context(instance)\n\n    def get_instance_attr_defs(self):\n        return [\n            BoolDef(\"EmbedMedia\",\n                    label=\"Embed Media\"),\n            BoolDef(\"SaveSelectedModelsOnly\",\n                    label=\"Save Selected Models Only\"),\n            BoolDef(\"KeepTransformHierarchy\",\n                    label=\"Keep Transform Hierarchy\"),\n        ]\n\n    def get_pre_create_attr_defs(self):\n        return self.get_instance_attr_defs()\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/api/plugin.html#client.ayon_motionbuilder.api.plugin.MotionBuilderCreator.remove_instances","title":"<code>remove_instances(instances)</code>","text":"<p>Remove specified instance from the scene.</p> <p>This is only removing <code>id</code> parameter so instance is no longer instance, because it might contain valuable data for artist.</p> Source code in <code>client/ayon_motionbuilder/api/plugin.py</code> <pre><code>def remove_instances(self, instances):\n    \"\"\"Remove specified instance from the scene.\n\n    This is only removing `id` parameter so instance is no longer\n    instance, because it might contain valuable data for artist.\n\n    \"\"\"\n    for instance in instances:\n        instance_node = get_node_by_name(\n            instance.data.get(\"instance_node\")\n        )\n        if instance_node:\n           instance_node.FBDelete()\n        self._remove_instance_from_context(instance)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/hooks/index.html","title":"hooks","text":""},{"location":"autoapi/client/ayon_motionbuilder/hooks/injected_python.html","title":"injected_python","text":"<p>Pre-launch hook to inject python environment.</p>"},{"location":"autoapi/client/ayon_motionbuilder/hooks/injected_python.html#client.ayon_motionbuilder.hooks.injected_python.InjectPythonPath","title":"<code>InjectPythonPath</code>","text":"<p>               Bases: <code>PreLaunchHook</code></p> <p>Inject AYON environment to 3dsmax.</p> <p>Note that this works in combination whit 3dsmax startup script that is translating it back to PYTHONPATH for cases when 3dsmax drops PYTHONPATH environment.</p> <p>Hook <code>GlobalHostDataHook</code> must be executed before this hook.</p> Source code in <code>client/ayon_motionbuilder/hooks/injected_python.py</code> <pre><code>class InjectPythonPath(PreLaunchHook):\n    \"\"\"Inject AYON environment to 3dsmax.\n\n    Note that this works in combination whit 3dsmax startup script that\n    is translating it back to PYTHONPATH for cases when 3dsmax drops PYTHONPATH\n    environment.\n\n    Hook `GlobalHostDataHook` must be executed before this hook.\n    \"\"\"\n    app_groups = {\"motionbuilder\"}\n    launch_types = {LaunchTypes.local}\n\n    def execute(self):\n        self.launch_context.env[\"MOTIONBUILDER_PYTHON_STARTUP\"] = (\n            os.environ[\"PYTHONPATH\"]\n        )\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/hooks/startup_script.html","title":"startup_script","text":"<p>Pre-launch to force motion builder startup script.</p>"},{"location":"autoapi/client/ayon_motionbuilder/hooks/startup_script.html#client.ayon_motionbuilder.hooks.startup_script.ForceStartupScript","title":"<code>ForceStartupScript</code>","text":"<p>               Bases: <code>PreLaunchHook</code></p> <p>Inject AYON environment to motion builder.</p> <p>Note that this works in combination with motion builder startup script that is translating it back to PYTHONPATH for cases when motion builder drops PYTHONPATH environment.</p> <p>Hook <code>GlobalHostDataHook</code> must be executed before this hook.</p> Source code in <code>client/ayon_motionbuilder/hooks/startup_script.py</code> <pre><code>class ForceStartupScript(PreLaunchHook):\n    \"\"\"Inject AYON environment to motion builder.\n\n    Note that this works in combination with motion builder startup script that\n    is translating it back to PYTHONPATH for cases when motion builder\n    drops PYTHONPATH environment.\n\n    Hook `GlobalHostDataHook` must be executed before this hook.\n    \"\"\"\n    app_groups = {\"motionbuilder\"}\n    order = 11\n    launch_types = {LaunchTypes.local}\n\n    def execute(self):\n        startup_args = [\n            \"-suspendMessages\",\n            os.path.join(MOTION_BUILDER_ADDON_ROOT, \"startup\", \"startup.py\"),\n        ]\n        self.launch_context.launch_args.append(startup_args)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/plugins/index.html","title":"plugins","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/create/index.html","title":"create","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/create/create_animation.html","title":"create_animation","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/create/create_animation.html#client.ayon_motionbuilder.plugins.create.create_animation.CreateAnimation","title":"<code>CreateAnimation</code>","text":"<p>               Bases: <code>MotionBuilderCreator</code></p> <p>Fbx for animated data</p> Source code in <code>client/ayon_motionbuilder/plugins/create/create_animation.py</code> <pre><code>class CreateAnimation(plugin.MotionBuilderCreator):\n    \"\"\"Fbx for animated data\"\"\"\n\n    identifier = \"io.ayon.creators.motionbuilder.animation\"\n    label = \"Animation\"\n    product_type = \"animation\"\n    icon = \"gears\"\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/plugins/create/create_workfile.html","title":"create_workfile","text":"<p>Creator plugin for creating workfiles.</p>"},{"location":"autoapi/client/ayon_motionbuilder/plugins/create/create_workfile.html#client.ayon_motionbuilder.plugins.create.create_workfile.CreateWorkfile","title":"<code>CreateWorkfile</code>","text":"<p>               Bases: <code>MotionBuilderCreatorBase</code>, <code>AutoCreator</code></p> <p>Workfile auto-creator.</p> Source code in <code>client/ayon_motionbuilder/plugins/create/create_workfile.py</code> <pre><code>class CreateWorkfile(plugin.MotionBuilderCreatorBase, AutoCreator):\n    \"\"\"Workfile auto-creator.\"\"\"\n    identifier = \"io.ayon.creators.motionbuilder.workfile\"\n    label = \"Workfile\"\n    product_type = \"workfile\"\n    icon = \"fa5.file\"\n\n    default_variant = \"Main\"\n\n    settings_category = \"motionbuilder\"\n\n    def create(self):\n        variant = self.default_variant\n        current_instance = next(\n            (\n                instance for instance in self.create_context.instances\n                if instance.creator_identifier == self.identifier\n            ), None)\n        project_name = self.project_name\n        folder_path = self.create_context.get_current_folder_path()\n        task_name = self.create_context.get_current_task_name()\n        host_name = self.create_context.host_name\n\n        if current_instance is None:\n            folder_entity = ayon_api.get_folder_by_path(\n                project_name, folder_path\n            )\n            task_entity = ayon_api.get_task_by_name(\n                project_name, folder_entity[\"id\"], task_name\n            )\n            product_name = self.get_product_name(\n                project_name,\n                folder_entity,\n                task_entity,\n                variant,\n                host_name,\n            )\n            data = {\n                \"folderPath\": folder_path,\n                \"task\": task_name,\n                \"variant\": variant\n            }\n\n            data.update(\n                self.get_dynamic_data(\n                    project_name,\n                    folder_entity,\n                    task_entity,\n                    variant,\n                    host_name,\n                    current_instance)\n            )\n            self.log.info(\"Auto-creating workfile instance...\")\n            instance_node = self.create_node(product_name)\n            data[\"instance_node\"] = instance_node\n            current_instance = CreatedInstance(\n                self.product_type, product_name, data, self\n            )\n            self._add_instance_to_context(current_instance)\n            instances_imprint(\n                instance_node, current_instance.data_to_store())\n        elif (\n            current_instance[\"folderPath\"] != folder_path\n            or current_instance[\"task\"] != task_name\n        ):\n            # Update instance context if is not the same\n            folder_entity = ayon_api.get_folder_by_path(\n                project_name, folder_path\n            )\n            task_entity = ayon_api.get_task_by_name(\n                project_name, folder_entity[\"id\"], task_name\n            )\n            product_name = self.get_product_name(\n                project_name,\n                folder_entity,\n                task_entity,\n                variant,\n                host_name,\n            )\n\n            current_instance[\"folderPath\"] = folder_entity[\"path\"]\n            current_instance[\"task\"] = task_name\n            current_instance[\"productName\"] = product_name\n\n    def collect_instances(self):\n        self.cache_instance_data(self.collection_shared_data)\n        cached_instances = (\n            self.collection_shared_data[\"mbuilder_cached_instances\"]\n        )\n        for instance in cached_instances.get(self.identifier, []):\n            created_instance = CreatedInstance.from_existing(\n                read(get_node_by_name(instance)), self\n            )\n            self._add_instance_to_context(created_instance)\n\n    def update_instances(self, update_list):\n        for created_inst, _ in update_list:\n            instance_node = created_inst.get(\"instance_node\")\n            instances_imprint(\n                instance_node,\n                created_inst.data_to_store()\n            )\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/plugins/load/index.html","title":"load","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/load/load_pointcache.html","title":"load_pointcache","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/load/load_pointcache.html#client.ayon_motionbuilder.plugins.load.load_pointcache.PointCacheLoader","title":"<code>PointCacheLoader</code>","text":"<p>               Bases: <code>LoaderPlugin</code></p> <p>Motion Builder Point Cache Loader.</p> Source code in <code>client/ayon_motionbuilder/plugins/load/load_pointcache.py</code> <pre><code>class PointCacheLoader(load.LoaderPlugin):\n    \"\"\"Motion Builder Point Cache Loader.\"\"\"\n\n    product_types = {\"model\", \"animation\", \"rig\", \"camera\"}\n    representations = {\"fbx\"}\n    order = -9\n    icon = \"code-fork\"\n    color = \"white\"\n\n    def load(self, context, name=None, namespace=None, data=None):\n        app = FBApplication()\n        loadOptions = FBFbxOptions(True)\n        loadOptions.SetAll(FBElementAction.kFBElementActionAppend, True)\n        namespace = unique_namespace(name + \"_\", suffix=\"_\")\n        namespace_list = FBStringList(namespace)\n        loadOptions.SetMultiLoadNamespaceList(namespace_list)\n        filename = self.filepath_from_context(context)\n        app.FileAppend(filename, True, loadOptions)\n        component_List = FBComponentList()\n        FBFindObjectsByName(( f\"{namespace}:*\"), component_List, True, False)\n        objects = [obj for obj in component_List]\n        return containerise(\n            name, context, objects, namespace=namespace,\n            loader=self.__class__.__name__\n        )\n\n    def update(self, container, context):\n        app = FBApplication()\n        repre_entity = context[\"representation\"]\n        namespace = container[\"namespace\"]\n        path = get_representation_path(repre_entity)\n        loadOptions = FBFbxOptions(True)\n        namespace_list = FBStringList(namespace)\n        loadOptions.SetMultiLoadNamespaceList(namespace_list)\n        current_file = app.FBXFileName\n        merged_filepath = FBStringList(f\"{current_file}~{path}\" )\n        loadOptions.SetAll(FBElementAction.kFBElementActionAppend, True)\n        app.FileMerge(merged_filepath, True, loadOptions)\n        imprint_repres = {\n            \"containers\": {\"representation\": repre_entity[\"id\"]}\n        }\n        imprint(container[\"instance_node\"], imprint_repres, update_asset=True)\n\n    def switch(self, container, context):\n        self.update(container, context)\n\n    def remove(self, container):\n        namespace = container[\"namespace\"]\n        component_List = FBComponentList()\n        container_node = container[\"instance_node\"]\n        # Remove container in scene inventory\n        try:\n            node = get_node_by_name(container_node)\n            node.FBDelete()\n            # Remove the connected object to the container\n            FBFindObjectsByName(f\"{namespace}:*\", component_List, True, False)\n            objects = [obj for obj in component_List]\n            for obj in objects:\n                if obj in FBSystem().Scene.Components:\n                    obj.FBDelete()\n            # clear unused namespace\n            if FBSystem().Scene.NamespaceEmpty(namespace):\n                FBSystem().Scene.NamespaceDelete(namespace)\n        except Exception:\n            pass\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/plugins/publish/index.html","title":"publish","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/publish/collect_current_file.html","title":"collect_current_file","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/publish/collect_workfile.html","title":"collect_workfile","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/publish/extract_animation.html","title":"extract_animation","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/publish/extract_animation.html#client.ayon_motionbuilder.plugins.publish.extract_animation.ExtractAnimation","title":"<code>ExtractAnimation</code>","text":"<p>               Bases: <code>Extractor</code></p> <p>Extract FBX Animation</p> Source code in <code>client/ayon_motionbuilder/plugins/publish/extract_animation.py</code> <pre><code>class ExtractAnimation(publish.Extractor):\n    \"\"\"\n    Extract FBX Animation\n    \"\"\"\n\n    order = pyblish.api.ExtractorOrder + 0.001\n    label = \"Extract Animation\"\n    hosts = [\"motionbuilder\"]\n    families = [\"animation\"]\n\n    def process(self, instance):\n        staging_dir = self.staging_dir(instance)\n        asset_filename = \"{name}.fbx\".format(**instance.data)\n\n        filepath = os.path.join(\n            staging_dir, asset_filename).replace(\"\\\\\", \"/\")\n\n        app = FBApplication()\n        saveOptions = FBFbxOptions(False)\n        creator_attributes = instance.data[\"creator_attributes\"]\n        saveOptions.EmbedMedia = (\n            True if creator_attributes.get(\"EmbedMedia\")\n            else False)\n        saveOptions.KeepTransformHierarchy = (\n            True if creator_attributes.get(\"KeepTransformHierarchy\")\n            else False)\n        # TODO: Select the model which needs to export\n        saveOptions.SaveSelectedModelsOnly = (\n            True if creator_attributes.get(\"SaveSelectedModelsOnly\")\n            else False)\n        selected_nodes = [node for node in\n                          FBSystem().Scene.RootModel.Children\n                          if node.Name in instance.data.get(\n                              \"selected_nodes\", [])]\n        with maintain_selection(selected_nodes):\n            app.FileSave(filepath, saveOptions)\n\n        representation = {\n            'name': 'fbx',\n            'ext': 'fbx',\n            'files': asset_filename,\n            \"stagingDir\": staging_dir,\n        }\n        instance.data[\"representations\"].append(representation)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/plugins/publish/increment_workfile_version.html","title":"increment_workfile_version","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/publish/increment_workfile_version.html#client.ayon_motionbuilder.plugins.publish.increment_workfile_version.IncrementWorkfileVersion","title":"<code>IncrementWorkfileVersion</code>","text":"<p>               Bases: <code>ContextPlugin</code></p> <p>Save current file</p> Source code in <code>client/ayon_motionbuilder/plugins/publish/increment_workfile_version.py</code> <pre><code>class IncrementWorkfileVersion(pyblish.api.ContextPlugin):\n    \"\"\"Save current file\"\"\"\n\n    label = \"Save current file\"\n    order = pyblish.api.ExtractorOrder - 0.49\n    hosts = [\"motionbuilder\"]\n    families = [\"workfile\"]\n\n    def process(self, context):\n        host = registered_host()\n        path = context.data[\"currentFile\"]\n        self.log.info(f\"Increment and save workfile: {path}\")\n        host.save_workfile(version_up(path))\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/plugins/publish/validate_scene_saved.html","title":"validate_scene_saved","text":""},{"location":"autoapi/client/ayon_motionbuilder/plugins/publish/validate_scene_saved.html#client.ayon_motionbuilder.plugins.publish.validate_scene_saved.ValidateSceneSaved","title":"<code>ValidateSceneSaved</code>","text":"<p>               Bases: <code>InstancePlugin</code></p> <p>Validate that workfile was saved.</p> Source code in <code>client/ayon_motionbuilder/plugins/publish/validate_scene_saved.py</code> <pre><code>class ValidateSceneSaved(pyblish.api.InstancePlugin):\n    \"\"\"Validate that workfile was saved.\"\"\"\n\n    order = pyblish.api.ValidatorOrder\n    families = [\"workfile\"]\n    hosts = [\"motionbuilder\"]\n    label = \"Validate Workfile is saved\"\n\n    def process(self, instance):\n        if not FBApplication().FBXFileName:\n            raise PublishValidationError(\n                \"Workfile is not saved\", title=self.label)\n</code></pre>"},{"location":"autoapi/client/ayon_motionbuilder/startup/index.html","title":"startup","text":""},{"location":"autoapi/client/ayon_motionbuilder/startup/startup.html","title":"startup","text":""},{"location":"autoapi/server/index.html","title":"server","text":""},{"location":"autoapi/server/settings.html","title":"settings","text":""}]}